MP2
cs438

Members:
--------
Md Tanvir Al Amin (maamin2@illinois.edu)
Canh Son Nguyen Ba (nguyenb1@illinois.edu)


How to run:
-----------
At first run the receiver by executing:
python receiver.py <receiver-port> <losspattern>
For example, run:
python receiver.py 1234 20

Then start the sender by executing:
python sender.py <receiver-domain-name> <receiver-port>
For example, assuming that the receiver runs in the same machine:
python sender.py test4.txt localhost 1234


Functionality:
--------------
The receiver prints the received file on the console.
The sender creates three output files:
1) trace
2) cwnd
3) log

File 'trace' and 'cwnd' follows the specifications described in the handout.

The log file records various events at the sender, along with the parameters.
Format of the log file is described later in this document.

Experiments:
------------
(a) Throughput:
a-throughput.pdf contains the throughput plot.

As required, throughput experiment was performed for loss patterns 5, 10, 20
and test files of size 10^3, 10^5, and 10^6 bytes. Each experiment was
performed 100 times and the mean throughput (along with one sigma error bars)
has been plotted.


Re-performaing the experiments:
-------------------------------
***NB: By default, plots require pdfcairo package which is not installed in
ews machines. Please change line 5 in the plotting scripts from format="pdf" 
to format="eps" as a workaround.***

(a) Throughput: 
The throughput experiment can be re-performed by the following command:
python run-throughput-test.py 1> a-throughput

The results will be redirected to the file a-throughput.
The following script will plot this datafile 
./plot-a-througput.sh
This script expects that the datafile is named 'a-throughput'



(b) Sequence number vs time:
The following script plots this experiment as b-trace.pdf
./plot-b-trace.sh

This script expects the data files are b-trace-0, b-trace-1, and b-trace-2
for loss pattern 0, 1, and 2, respectively.

(c) cwnd vs time:
The following script plots this experiment as c-cwnd.pdf
./plot-c-cwnd.sh
This script expects the data files are c-cwnd-0, c-cwnd-1, and c-cwnd-2
for loss pattern files 0, 1, and 2, respectively.

Test Files:
-----------
test3.txt: 1000 bytes
test4.txt: 10000 bytes
test5.txt: 100000 bytes
test6.txt: 1000000 bytes

The test files can be generated by the python script generate-test-file.py

To create a 100000 byte file named test_file.txt, run:
python generate-test-file.py 100000 > test_file.txt

The file contains integers starting from 1, one per line, until the number of
byte requirements have been reached.




Description:
------------

Sender:
source file: sender.py
language: python

Receiver:
source file: receiver.py
language: python

The code implements the functionality of TCP on top of UDP.

All the required features for MP2 have been added, i.e.
(i) Congestion avoidance and control,
(ii) Fast retransmit and fast recovery,
(iii) Calculation of RTO and timeouts,
(iv) Slow start

We have implemented TCP state diagram from the book (Figure 3.52 of 6th Ed)

The data with header format is:
[sequence number, ack number, rwnd, msg_type] data

msg_type: 
    0 for normal data, 
    1 for connection termination (sent from sender to receiver)
    2 for ack 
An example segment will look like
[10,4,50,0]this is a data

The segments are all MSS bytes (100 bytes) in size other than the very last.

The submitted code has been thoroughly tested. It prints the received file on 
the receiver side on the sender side it created two output files named 'trace'
and 'cwnd' as described in the handout.


